# Note: ! 를 force 용도로, 대문자를 조심해야할 커맨드 용도로 사용할 것.

# g                    git

## ga: git-add
ga                   git add
gaA                  git add --all
gapa                 git add --patch
gau                  git add --update
gav                  git add --verbose

# git-branch
gb                   git branch
gbm                  git branch -m
gba                  git branch -a
gbnm                 git branch --no-merged
gbr                  git branch --remote
gbd                  git branch -d
gbD                  git branch -D
gbdA                 git branch --no-color --merged | command grep -vE "^(\+|\*|\s*(master|main|develop|dev)\s*$)" | command xargs -n 1 git branch -d

# git-blame
gbl                  git blame -b -w

# git-bisect
gbs                  git bisect
gbsb                 git bisect bad
gbsg                 git bisect good
gbsr                 git bisect reset
gbss                 git bisect start

# gc: git-commit
gc                   git commit -v
gca                  git commit -v --amend
gca!                 git commit -v --amend --no-edit
gcmsg                git commit -m

# git cherry-pick
gcp                  git cherry-pick
gcpa                 git cherry-pick --abort
gcpc                 git cherry-pick --continue

# git-diff
gd                   git diff
gdca                 git diff --cached
gdcw                 git diff --cached --word-diff
#gds                  git diff --staged # NOTE: It conflicts with "git diff --stat"
gdt                  git diff-tree --no-commit-id --name-only -r
gdw                  git diff --word-diff
gdl                  git difftool
gds                  git diff --stat

# git-fetch
gf                   git fetch
gfa                  git fetch --all --prune
gfo                  git fetch origin

# gl: git-log
gl                   git log --oneline --decorate -19
gll                  git log --oneline --decorate
gld                  git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short
glda                 git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short --all
glds                 git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short --stat
glg                  git log --oneline --decorate --graph -19
glgg                 git log --oneline --decorate --graph
glga                 git log --oneline --decorate --graph --all
glgf                 git log --graph --decorate
glgp                 git log --decorate --oneline --graph --show-pulls --
gls                  git log --stat
glsp                 git log --stat -p
glcount              git shortlog -sn

# git-merge
gm                   git merge
gmom                 git merge origin/master
gmum                 git merge upstream/master
gmA                  git merge --abort
gmt                  git mergetool --no-prompt
gmtvim               git mergetool --no-prompt --tool=vimdiff

# gp: git-push
gp                   git push
gpd                  git push --dry-run
gpf                  git push --force-with-lease
gpf!                 git push --force
#gpoat                git push origin --all && git push origin --tags
#gpsup                git push --set-upstream origin $(git_current_branch)
gpu                  git push upstream
gpv                  git push -v
ggpush               git push --set-upstream origin HEAD
gp!                  git push --force-with-lease


# grb: git-rebase
grb                  git rebase
grbA                 git rebase --abort
grbc                 git rebase --continue
grbi                 git rebase -i
grbm                 git rebase main
grbs                 git rebase --skip

# git-revert
grev                 git revert

# gr: git-reset
gr                   git reset
grhd                 git reset HEAD
grH                  git reset --hard
grHhd                git reset --hard HEAD
grHh1                git reset --hard HEAD~1
# gru                  git reset --
# groh                 git reset origin/$(git_current_branch) --hard

# grm: git-rm
grm                  git rm
grmc                 git rm --cached

# git-remote
# gre: git-remote
gre                  git remote
grea                 git remote add
gremv                git remote rename
grerm                git remote remove
greset               git remote set-url
greup                git remote update
grev                 git remote -v

# grs: git-restore
grs                  git restore
grss                 git restore --source

# gsu: git-submodule
gsui                 git submodule init
gsuu                 git submodule update
gsur                 git submodule update --recursive

# gs: git-status
gs                   git status -s
gsb                  git status -sb
gss                  git status

# gsh: git-show
gsh                  git show
gshps                git show --pretty=short --show-signature

# gst: git-stash
gst                  git stash
gstl                 git stash list
gstp                 git stash pop
# gsta                 git stash save
# gstaa                git stash apply
# gstc                 git stash clear
# gstd                 git stash drop
# gsts                 git stash show --text
# gstall               git stash --all


# gsw                 git switch
gsw                  git branch | sed 's/^[[:space:]*]*//' | fzf --header="current: $(git branch --show-current)" --preview='git log --oneline --color=always {}' | xargs git switch
gswc                 git switch -c

# gt: git-tag
gts                  git tag -s
gtv                  git tag | sort -V

# git-pull
gpu                  git pull
gpur                 git pull --rebase
gpurv                git pull --rebase -v
gpura                git pull --rebase --autostash
gpurav               git pull --rebase --autostash -v
# glum                 git pull upstream master
# ggpull               git pull origin "$(git_current_branch)"
# ggpush               git push origin "$(git_current_branch)"

# git-clone
gcl                  git clone --depth 1 --recurse-submodules --shallow-submodules
gcL                  git clone --recurse-submodules

# misc
#ggsup                git branch --set-upstream-to=origin/$(git_current_branch)
gcf                  git config --list
gclean               git clean -id
gfg                  git ls-files | grep
gg                   git gui citool
gga                  git gui citool --amend
ghh                  git help
gignored             git ls-files -v | grep "^[[:lower:]]"
gwch                 git whatchanged -p --abbrev-commit --pretty=medium
gunignore            git update-index --no-assume-unchanged
gignore              git update-index --assume-unchanged
grl                  git reflog
# gap                  git apply
gpristine!           git reset --hard && git clean -dfx
gdct                 git describe --tags $(git rev-list --tags --max-count=1)
gke                  \gitk --all $(git log -g --pretty=%h)
gpoat                git push origin --all && git push origin --tags
gtl                  gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl

#
# new-commands
#
grt                  cd "$(git rev-parse --show-toplevel || echo .)"
gwip                 git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"
gunwip               git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1
